
//previously wrote this code thinking that if I can get as much of this on the FE and minimized database updates, it will be faster, as the less SQL commands are being made, the better.
//Was thinking image data could be fetched according to corresponding hands that are being toggled to display on the FE, based on these FE functions.
//Ran into dead end, so cannibalizing the code and turning it into Ruby for backend actions.



class Card {
  constructor(suit, value) {
    this.suit = suit;
    this.value = value;
  }
}

let suits = ["Hearts", "Spades", "Clubs", "Diamonds"]
let values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "K", "J", "Q", "A"]



function generateDeck(){
  //add conditional here: If currentDeck.length === 0, generates new deck.
  let deck = []
  for (let suit in suits){
    for (let value in values){
      deck.push(new Card(suits[suit], values[value]))
    }
  }
  return deck
}
//Once we implement everything, we need to call GenerateDeck for every round, to ensure the deck never runs out. 
let deck = generateDeck()

function drawCard(){
  //randomizing the index ensures the deck is always 'shuffled.'
  let cardIndex = Math.floor(Math.random() * deck.length)
  let card = deck[cardIndex]
  deck.splice(cardIndex, 1)
  return card
}

// console.log(drawCard())
// console.log(deck.length)

// (pseudoCode):
// function aces(card){
//   if (card.value === 'A' && hand.total <= 11){
//     card.value = 10
//   } else {
//     card.value = 1
//   }
// }

let testHand = [{suit: "spade", value: 10},{suit: "hearts", value: 10},{suit: "spade", value: "A"}]

function calculateTotal(hand){
  let total = 0
  hand.forEach(card => {
    if (parseInt(card.value) > 0){
      total += parseInt(card.value)
    } else if (card.value === "A" && total <= 10){
      total += 11
    } else if (card.value === "A" && total > 10) {
      total += 1
      card.value = 1
    } else {
      total += 10
    }
  })
  return total
};

console.log(calculateTotal(testHand))


function swapAceValue(){
  if (userHand.find(card => card.value ==="A")){  
  let ace = userHand.find(card => card.value === "A")
  ace.value = 1
  }
}

userHand = [{suite: "Diamond", value: 10}, {suite: "Spades", value: 10},{suite: "Hearts", value: "A"}, {suite: "blah", value: 10}]

function checkIfBust(){
  let aces = []
  aces.push(userHand.find(card => card.value === "A"))

  let total = calculateTotal(userHand)
  console.log(typeof aces[0])
  if (total > 21 && typeof aces[0] != "undefined"){
    swapAceValue(userHand)
    total = calculateTotal(userHand)
    return total
  } else if (total > 21 && typeof aces[0] === "undefined"){
    console.log("You busted.")
    //end round, player loses all money they bet.
  }
}

checkIfBust()

// console.log(calculateTotal(userHand))

//Will be linked to player click event:
function hitMe(){
  userHand.push(drawCard())
  //checkIfBust()
  //add conditional that says if busted()==="You busted." ends the round, player loses bet.
  return userHand
}




//split will activate on a click event.

//The button for split will have it's display set to hidden unless player has two of the same card in his hand.

//I was thinking initially that 'split' would add a new array into UserHand, but this messes up the way calculateTotal works.

//So a better way to do it with the code I've already written is to add arrays.

//Looked up rules on splitting and some casinos only allow one split, most allow three, and a few allow six.

function checkIfSplitPossible(){
  if (userHand.length === 2 && userHand[0].value === userHand[1].value){
    //(split button selector goes here).style.display = 'block'
    //will have to replace userHand with currentHand, once I figure out how to alternate which hand is in play, but this is the gist of it.
  }
}

function split(event){
  userHand1.push(userHand[0])
  userHand.unshift(userHand[0])
}